-module(serverlang).
-export([start/0, stop/0]).

start() -> 
    {ok, ListenSocket} = gen_tcp:listen(8080, [{active, false}, {reuseaddr, true}]),
     loop(ListenSocket),
    io:format("Server started at http://localhost:8080~n").

loop(ListenSocket) ->
    {ok, Socket} = gen_tcp:accept(ListenSocket),
    spawn(fun() -> handle(Socket) end),
    loop(ListenSocket).
 
handle(Socket) ->
    Request = read_request(Socket),
    Response = handle_request(Request),
    gen_tcp:send(Socket, Response),
    gen_tcp:close(Socket).
 
read_request(Socket) ->
    {ok, Request} = gen_tcp:recv(Socket, 0),
    Request.
	
handle_request(_Request) ->
    "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<html><body><h1>Welcome to my Erlang web server ahue!</h1></body></html>\r\n".
   
stop() ->
    {ok, Pid} = net_adm:ping('serverlang@localhost'), 
	io:format("Server started at http://localhost:8080~n Pid~s~n", [Pid]),
    {ok, _} = rpc:call('serverlang@localhost', init, stop, []),
    io:format("Server stopped~n"),
    erlang:halt().
	
%% erl -sname serverlang -detached -run serverlang start
%% erl -sname serverlang -detached -run serverlang stop
%% c(serverlang).